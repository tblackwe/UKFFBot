name: Deploy UKFF Slack Bot

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  # Test and validate the code
  test:
    name: Test and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint || echo "No lint script found, skipping"

      - name: Validate SAM template
        run: |
          # Install SAM CLI
          wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
          sudo ./sam-installation/install
          
          # Validate template
          sam validate --template template.yaml

  # Determine deployment environment and strategy
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
    steps:
      - name: Determine environment and deployment strategy
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy to AWS
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [test, determine-environment]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    concurrency:
      group: deploy-${{ needs.determine-environment.outputs.environment }}
      cancel-in-progress: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Install dependencies
        run: npm ci --production

      - name: Build SAM application
        run: sam build --use-container

      - name: Create S3 bucket for deployments
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          S3_BUCKET="ukff-slack-bot-deployments-${ACCOUNT_ID}"
          
          # Check if bucket exists
          if ! aws s3 ls "s3://$S3_BUCKET" 2>/dev/null; then
            echo "Creating S3 bucket: $S3_BUCKET"
            aws s3 mb "s3://$S3_BUCKET" --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket $S3_BUCKET --versioning-configuration Status=Enabled
          fi
          
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

      - name: Deploy to AWS
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
        run: |
          STACK_NAME="ukff-slack-bot-${ENVIRONMENT}"
          
          sam deploy \
            --stack-name $STACK_NAME \
            --s3-bucket $S3_BUCKET \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --parameter-overrides \
              SlackBotToken=$SLACK_BOT_TOKEN \
              SlackSigningSecret=$SLACK_SIGNING_SECRET \
              Environment=$ENVIRONMENT \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --tags \
              Application=UKFFBot \
              Environment=$ENVIRONMENT \
              GitCommit=${{ github.sha }} \
              GitBranch=${{ github.ref_name }} \
              DeployedBy=GitHubActions

      - name: Get deployment outputs
        id: outputs
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          STACK_NAME="ukff-slack-bot-${ENVIRONMENT}"
          
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`SlackBotApiUrl`].OutputValue' \
            --output text)
          
          TABLE_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`DynamoDBTableName`].OutputValue' \
            --output text)
          
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "table_name=$TABLE_NAME" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        env:
          API_URL: ${{ steps.outputs.outputs.api_url }}
          TABLE_NAME: ${{ steps.outputs.outputs.table_name }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          echo "🧪 Running smoke tests..."
          
          # Test API Gateway endpoint
          echo "Testing API Gateway endpoint: $API_URL"
          curl -f -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d '{"type":"url_verification","challenge":"test"}' \
            || (echo "❌ API Gateway health check failed" && exit 1)
          
          # Test DynamoDB table exists
          echo "Testing DynamoDB table: $TABLE_NAME"
          aws dynamodb describe-table --table-name $TABLE_NAME \
            || (echo "❌ DynamoDB table check failed" && exit 1)
          
          echo "✅ All smoke tests passed!"

      - name: Update deployment status
        if: success()
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          API_URL: ${{ steps.outputs.outputs.api_url }}
        run: |
          echo "✅ Deployment to $ENVIRONMENT completed successfully!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "  Environment: $ENVIRONMENT"
          echo "  API URL: $API_URL"
          echo "  Git Commit: ${{ github.sha }}"
          echo "  Git Branch: ${{ github.ref_name }}"
          echo ""
          echo "🔍 Next Steps:"
          echo "1. Update your Slack app configuration:"
          echo "   - Event Subscriptions Request URL: $API_URL"
          echo "   - Interactivity Request URL: $API_URL"
          echo ""
          echo "2. Monitor your deployment:"
          echo "   - CloudWatch Logs: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#logsV2:log-groups"
          echo "   - Lambda Functions: https://console.aws.amazon.com/lambda/home?region=${{ env.AWS_REGION }}#/functions"

  # Cleanup on failure
  cleanup:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [deploy, determine-environment]
    if: failure() && needs.determine-environment.outputs.environment != 'prod'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup failed deployment
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          STACK_NAME="ukff-slack-bot-${ENVIRONMENT}"
          
          echo "🧹 Cleaning up failed deployment for $ENVIRONMENT environment..."
          
          # Only cleanup non-production environments
          if [[ "$ENVIRONMENT" != "prod" ]]; then
            # Check if stack exists and is in a failed state
            STACK_STATUS=$(aws cloudformation describe-stacks \
              --stack-name $STACK_NAME \
              --region ${{ env.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text 2>/dev/null || echo "STACK_NOT_FOUND")
            
            if [[ "$STACK_STATUS" =~ "FAILED" || "$STACK_STATUS" =~ "ROLLBACK" ]]; then
              echo "Stack is in failed state: $STACK_STATUS. Deleting..."
              aws cloudformation delete-stack \
                --stack-name $STACK_NAME \
                --region ${{ env.AWS_REGION }}
              
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete \
                --stack-name $STACK_NAME \
                --region ${{ env.AWS_REGION }}
              
              echo "✅ Cleanup completed"
            else
              echo "Stack status: $STACK_STATUS. No cleanup needed."
            fi
          else
            echo "⚠️  Production environment detected. Skipping cleanup for safety."
          fi
